{ var indentStack = [], indent = ""; }

start
  = cmds:(__ cmd:CMD __ EOL? {return cmd;})* ns:(__ ns:NODE __ {return ns;})+    {return {commands:cmds, model:ns}}


CMD
  = "/" cmd:Literal WS attributes:(NAMEDATTRIBUTE/ATTRIBUTE)* EOL+ {return {type:cmd.trim(), attributes:attributes};}


NODEHEAD = c:[a-zA-Z.]+ " "* {return c.join("");}

WS "whitespace"
  = " "*/EOL

NODE
  = SAMEDENT node:(!EOL nodeHead:LiteralOrStringOrCode " "* attributes:(NAMEDATTRIBUTE/ATTRIBUTE)* {if (attributes.length>0) return {node:nodeHead, attributes:attributes}; return {node:nodeHead};}) __
    children:( INDENT c:NODE* __ DEDENT { return c; })?
    {     
      if (children) node["children"]=children; 
      return node; 
	}

ATTRIBUTE
  = attr:LiteralOrStringOrCode " "* { return {attr:attr}}

NAMEDATTRIBUTE
  = name:LiteralOrStringOrCode "=" attr:LiteralOrStringOrCode " "* { var o = {};o[name]=attr;return o;}


Literal = c:[a-zA-Z0-9_]+ {return c.join("");}

Code = i:[=#] c:[.a-zA-Z0-9_]+ {return i + c.join("") ;}

LiteralOrStringOrCode = Literal/StringLiteral/Code

StringLiteral "string"
  = parts:('"' DoubleStringCharactersAllowLineTerminator? '"' / "'" SingleStringCharacters? "'") {
      return parts[1];
    }

DoubleStringCharacters
  = chars:DoubleStringCharacter+ { return chars.join(""); }

DoubleStringCharactersAllowLineTerminator
  = chars:DoubleStringCharacter+ { return chars.join(""); }


SingleStringCharacters
  = chars:SingleStringCharacter+ { return chars.join(""); }

DoubleStringCharacter
  = !('"' / "\\" / LineTerminator) char_:. { return char_;     }
  / "\\" 

DoubleStringCharacterAllowLineTerminator
  = !('"' / "\\" ) char_:. { return char_;     }
  / "\\" 

SingleStringCharacter
  = !("'" / "\\" / LineTerminator) char_:. { return char_;     }
  / "\\" 

LineTerminator
  = [\n\r\u2028\u2029]
__
 = (" " / MULTILINECOMMENT / EOL)*

MULTILINECOMMENT
  = "/*" (!"*/" .)* "*/"

EOL
  = ([ \t]*) ("\r\n" / "\n" / "\r")

SAMEDENT
  = i:[ \t]* &{ return i.join("") === indent; }

INDENT
  = i:[ \t]+ &{ return i.length > indent.length; }
    { indentStack.push(indent); indent = i.join(""); pos = offset; }

DEDENT
  = { indent = indentStack.pop(); }